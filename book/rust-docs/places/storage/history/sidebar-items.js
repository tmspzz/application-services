initSidebarItems({"fn":[["apply_observation","Returns the RowId of a new visit in moz_historyvisits, or None if no new visit was added."],["apply_observation_direct","Returns the RowId of a new visit in moz_historyvisits, or None if no new visit was added."],["delete_everything",""],["delete_place_visit_at_time",""],["delete_place_visit_at_time_by_href",""],["delete_visits_between","Delete all visits in a date range."],["delete_visits_between_in_tx",""],["delete_visits_for","Deletes all visits for a page given its GUID, creating tombstones if necessary."],["frecency_stale_at","Indicates if and when a URL’s frecency was marked as stale."],["get_top_frecent_site_infos",""],["get_visit_count",""],["get_visit_infos",""],["get_visit_page",""],["get_visit_page_with_bound",""],["get_visited",""],["get_visited_into","Low level api used to implement both get_visited and the FFI get_visited call. Takes a slice where we should output the results, as well as a slice of index/url pairs."],["get_visited_urls","Get the set of urls that were visited between `start` and `end`. Only considers local visits unless you pass in `include_remote`."],["href_to_guid","Returns the GUID for the specified Url String, or None if it doesn’t exist."],["prune_destructively",""],["update_frecency",""],["url_to_guid","Returns the GUID for the specified Url, or None if it doesn’t exist."],["wipe_local",""]],"mod":[["history_sync",""]]});